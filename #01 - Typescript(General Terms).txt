Typescript Nedir?

- Bizim daha hassas-duyarlı-keskin bir şekilde Javascript yazmamızı ve bu sayede yazdığımız kodun ileride daha az hatayla karşılaşmasını sağlayan bir "programlama dilidir!".
Hataları daha yazarken yakalamamızı sağlar. Bize yeni döngüler, sınıflar veya modüller kazandırmaz. Hatta TS ile yazdığımız tüm kodlar compiler edilirken JS'e dönüştürülür.

Typescript kullanmanın en önemli sebebi Type Safety(Tip Güvenliği)'dir.

2 + "2" konsolda '22' cevabını verecektir. 
null + 2 -> 2
undefined + 2 -> NaN gibi gibi.

Çünkü Tip Güvenli değildir. Keşke ilk adımda beni integer ile string'i toplamayı durduracak bir güç olsaydı...

---

Typescript'in Çalışma Mantığı

Typescript, Static Checking mantığı ile çalışır. Bu mantıkta kodu yazarken, yazdığımız dile ait syntax ile kodumuz IDE'de analiz edilir. Javascript'de ise bu yapılmaz. JS'de sadece kodu execute ettiğimizde eğer ki varsa hatalarla karşılaşırız. Bu tip durumlarda kodumuzu daha yazarken kontrol edebilecek ve hatayı anında bildirebilecek bir mantık olsa iyi olabilirdi. İşte burada Typescript'in yaptığı belki de en önemli iş olan static checking ile kod analizi devreye giriyor.

JS'den bir farkı daha ise bilinenin aksine, TS ile daha çok satır yazmamız gerekir. JS ile 10 satırda yazılabilecek bir kod TS ile 50 satıra kadar çıkabilir.

Peki gelişim süreci nasıl işler?

.ts formatında kod yazılır. --transpile-convert-compile process--> Javascript

TS bir development tool yani geliştirme aracıdır. TS ile yazılan proje JS ile çalışır. Üretilen kod hala %100 JS'dir. Tekrar tekrar söylediğimiz gibi TS bize kodumuzu daha güvenli, daha az hatalı hale getirecek bir katman sağlar.

https://www.typescriptlang.org/ ile tarayıcı üzerinden yazdığımız TS kodlarının JS'e nasıl dönüştürüldüğünü görebiliriz.

Örnek:

TS:

let user = { name: "Cagatay", age: 28}
let email = user.email
Hata:Property 'email' does not exist on type '{ name: string; age: number; }'.(2339)

JS:

"use strict";
let user = { name: "Cagatay", age: 28 };
let email = user.email;
Hata yok.

---

Typescript Global Olarak Yükleme

1- https://www.typescriptlang.org/download 'dan npm install -g typescript'i kopyala.
2- cmd'i açalım.
3- node -v ile node.js yüklü mü kontrol edelim. Değilse indirelim.
4- npm -v ile node package yüklü mü kontrol edelim. Değilse indirelim.
5- npm install -g typescript 'i yapıştır ve enter.

----

Studio Code ile projemizi oluşturalım.

intro.ts ile 

let user {name: "cagatay", age: 10}

 console.log("Cagatay")
 console.log(user.name)
 
yazdığımızda kodu execute edemeyiz.

Terminal'e tsc intro.ts yazdığımızda otomatik olarak aynı klasöre intro.js oluşturulduğunu görürüz.
Ayrıca bu durumda kod kısmı da aynı olacaktır.

intro.js

var user = { name: "cagatay", age: 10 };
console.log("Cagatay");
console.log(user.name);

Bunları yaptıktan sonra intro.ts'de Cannot redeclare block-scoped variable 'user'.ts(2451) hatası verildiğini görürüz. İleride daha detaylı..

---

Typescript Types-Tipler

- Number, String, Boolean, Null, Undefined, Void, Object, Array, Tuples, Never, Unknown, Any(kullanma!)...
- Detaylı: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html

Kodumuzu yazmadan önce situations-durumlara dikakt etmeliyiz.
Anlamı ise hangi durumda hangi tip veri gönderen, alan ya da dönüştürme işlemleri yapan fonksiyonlara(illa fonksiyon olması şart değil) ihtiyacımız olacak bunu iyi belirlememiz gerektiği.

Diyelim ki ,
- function A: 2 sayı kabul eden bir fonksiyon,
- function B: string dönen bir fonksiyon yazdık.

Ve bir başka yazılımcı bilmeden uygun olmayan verileri bu fonksiyonlara gönderdi ya da aldı. Bu problemlere sebep olabilir.

Fakat Typescript ile kodumuzu yazdığımız zaman B fonksiyonunda her zaman string çıktısı alacağımızı biliriz. 
Ayrıca bir takım çalışmasında, çalışma arkadaşlarımızda bunun farkında olacağından ekip çalışması daha efektif bir hal alacaktır.

---

Syntax

let variableName: type = value

- Typescript'de bütün type'lar lowercase'dir.

variableMe.ts;

let greetings: string = "Cagatay Demirtas"
console.log(greetings)

export{} //alınan hatayı geçiçi olarak gidermek için. (ileride detaylı)

variableMe.js;

"use strict";
//let greetings: string yazıp bırakırsak sadece değişkeni tanımlamış oluruz.
exports.__esModule = true;
var greetings = "Cagatay Demirtas";
console.log(greetings);

Diyelim ki bir başka geliştirici geldi ve

greetings = 5 ya da greetings = true yazdı. Program anında hata verecek ve sayı, boolean girilemeyeceğini sadece string kabul ettiğini söyleyecektir.
Type 'number' is not assignable to type 'string'.ts(2322)

greetings. dediğimiz anda ise sadece string'e ait metotların listelendiğini görürüz.

---

Number, Boolean ve Type Inference

Not: Javascript'in integer'lar için özel bir runtime değeri yoktur. Int veya float her şey 'number'dır.

// number

let userId: number = 3334455
let userId2: number = 3334455.3

//Görüldüğü üzere integer ya da float farketmedi. Typescript ikisini de number olarak kabul etti.
//Bu da pek istenen bir durum değil.

userId2.toFixed()
//userId = "cagatay" hata!
//userId. yazdığımızda sayılara ait metotların sıralandığını görürüz.

// boolean

let isLoggedIn: boolean = false
//isLoggedIn.valueOf 'dan başka fonksiyonu da yok zaten.

Type Inference'ı atanan değerden tür çıkarını olarak belirtebiliriz. Typescript akıllı bir dil olduğundan daha değeri yazarken değişkenin türünü anlayabilmektedir.

---

ANY Kullanma!

//any

//Kötü kullanım;

let hero;

function getHero() {
    return "Rorschach" //true'da yazabilirdik. 33'de yazabilirdik.
}

hero = getHero()

// Şu anda let hero: any olarak kaldı. Typescript hangi tür geleceğini bilemediği için any kullandı.
// Bu Typescript'te tam olarak istenen bir durum değil.

//İyi kullanım;

let hero: string; //artık hero değişkeninin sadece string olacabileceğini belirttik.

function getHero() {
    return "Rorschach" //return true hata verecektir!
}

hero = getHero()

Not: Any string ya da boolean gibi bir tür değildir. Any basitçe Typescript'te 'type checking' yapmak istemediğimiz değişkenlerde işaretleyici olarak kullandığımız
bir kullanımdır.

Not:

//noImplicitAny

//Typescript'in any olarak belirlediği anda hata vermesini istersek tsconfig ayarlarından noImplicitAny'i aktif edersek;
//This can cause some errors to be missed, for example:
/*
function fn(s) {
  // Hata yok. s burada any olarak belirlendi.
  console.log(s.subtr(3));
}
fn(42);
*/
//Aktif edildikten sonra;

function fn(s) {
    // Parameter 's' implicitly has an 'any' type. hatası verecektir.
    console.log(s.subtr(3));
  }
fn(42);

