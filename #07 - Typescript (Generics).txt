Generics, Generic Classes

const score: Array <number> = []
const names: Array <string> = []

//bool ve number değer alıp bool ve number dönebilir.
function identityOne(val: boolean | number): boolean | number {
    return val
}

//her tipte veriyi alıp her tipte veri dönebilir.
function identityTwo(val: any): any {
    return val
}

//Type tipinde veri alıp, Type tipinde dönebilir.
function identityThree<Type>(val: Type): Type {
    return val
}
//bu şekilde kullanımın avantajı, eğer ki input'u number olarak belirtirsek otomatik olarak parametreyi ve dönüş tipini de number yapmasıdır.

identityThree(3) //function identityThree<3>(val: 3): 3
identityThree("cagatay") //function identityThree<"cagatay">(val: "cagatay"): "cagatay"
identityThree(true) //function identityThree<true>(val: true): true

//biraz daha kısaltalım.
function identityFour <T>(val: T): T {
    return val
}

//bu şekilde kullanımın bir avantajı da kendi type'larımızı yaratıp uygulatabilmemizdir.

interface Bootle {
    brand: string,
    type: number
}
console.log(identityFour<Bootle>({brand: "Whiskey", type: 4}).brand)
console.log(identityFour<Bootle>({brand: "Whiskey", type: 40}).type)
console.log(identityFour<Bootle>({brand: "Whiskey", type: 4}))

// Generics in Array and Arrow Functions

function logIdentity<Type>(arg: Type[]) : Type[] {
    console.log(arg.length)
    return arg
}

function logIdentity2<Type>(arg: Array<Type>) : Array<Type> {
    console.log(arg.length)
    return arg
}

//iki fonksiyon da aynı işi yapmaktadır. logIdentity fonksiyonları Type tipinde arg parametresi almaktadır ve aynı zamanda arg, Type türünden bir dizidir. Bu fonksiyonlar yine Type türünden arg dizisi döndürmektedir.

//T tipinde bir products dizisi alıp, T tipinde bir değer dönsün.
function getSearchProducts<T>(products: T[]): T {
    // veritabanı operasyonları...
    const myIndex = 3
    return products[myIndex] //dizinin 4. elemanını döndür.
}

//bu fonksiyonu Arrow Function'a dönüştürelim.
const getMoreSeatchProducts = <T>(products: T[]): T => {
    // veritabanı operasyonları...
    const myIndex = 3
    return products[myIndex] 
}

// NOT: <T,>(products: T[]): T => {...} gibi virgül kullanan bir tanımlama görürsek bu yukarıdaki syntax'in JSX olmadığını, generic syntax'e ait olduğunu belirtmek için kullanılır.

// NOT: const element = <h1>Merhaba Dünya!
// Buna JSX denir, JavaScript için bir syntax uzantısıdır. JSX, React elementleri üretir. HTML'e çok benzer.

// Generic Classes

// Bir type parameter tanımlayıp onu bir başka type parameter ile kısıtlayabiliriz. Burada U'yu Database Type'ı ile kısıtladık.
interface Database {
    connection: string,
    username: string,
    password: string
}
//U Extends Database yerine direkt Database de yazabilirdik. Ama bilgi bilgidir yani.
function anotherFunction<T, U extends Database>(valOne:T, valTwo: U): object {
    return {
        valOne,
        valTwo
    }
}

anotherFunction(3, {connection: "Sql", username: "cagatay", password: "123"})

// 

interface Quiz {
    name: string,
    type: string
}

interface Course {
    name: string,
    author: string,
    subject: string
}

class Sellable<T> {
    public cart: T[] = []

    addToCart(product: T) {
        this.cart.push(product)
    }
}

//Bir nesnenin property'lerine erişmek için bir fonksiyon oluşturalım.
//keyof, oluşturduğumuz tip objelerindeki keyler ile yeni tipler oluşturmamıza olanak sağlar.
function getProperty<Type, Key extends keyof Type>(obj: Type, key: Key) {
    console.log(key)
    return obj[key];
    //bu satır için: https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html
}
  
let x = { a: 1, b: "caca", c: true, d: 3.4 };

getProperty(x, "d")
console.log(getProperty(x, "d"));
//console.log(getProperty(x, "z")); //hata
